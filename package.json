{
    "name": "gepper",
    "displayName": "gepper",
    "description": "My cpp helper commands and snippets",
    "publisher": "guttih",
    "version": "0.0.1",
    "repository": {
        "type": "git",
        "url": "https://github.com/guttih/gepper"
    },
    "bugs": {
        "url": "https://github.com/guttih/gepper/issues",
        "email": "gudjonholm@gmail.com"
    },
    "license": "SEE LICENSE IN LICENSE",
    "engines": {
        "vscode": "^1.66.0"
    },
    "categories": [
        "Other",
        "Snippets"
    ],
    "keywords": [
        "c++",
        "cpp",
        "guttih",
        "tern"
    ],
    "activationEvents": [
        "onCommand:gepper.helloWorld",
        "onCommand:gepper.createClass"
    ],
    "main": "./dist/extension.js",
    "contributes": {
        "commands": [
            {
                "command": "gepper.helloWorld",
                "title": "Hello World"
            },
            {
                "command": "gepper.createClass",
                "title": "Create a new C++ Class"
            }
        ],
        "snippets": [
            {
                "language": "cpp",
                "path": "./snippets/class.json"
            }
        ],
        "menus": {
            "explorer/context": [
                {
                    "group": "navigation@-1",
                    "command": "gepper.createClass"
                }
            ]
        },
        "languages": [
            {
                "id": "cpp",
                "extensions": [
                    ".cpp",
                    ".hpp"
                ]
            }
        ],
        "configuration": [
            {
                "title": "Gepper C++ helper",
                "properties": {
                    "cpp.gepper.classPath": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "description": "Where the class will be created, relative to the project directory."
                    },
                    "cpp.gepper.classHeaderTemplate": {
                        "type": "string",
                        "editPresentation": "multilineText",
                        "default": "#ifndef {{__CLASS_NAME_UPPER__}}_H\n#define {{__CLASS_NAME_UPPER__}}_H\n\n#pragma once\n\nclass {{__CLASS_NAME__}}\n{\npublic:\n    {{__CLASS_NAME__}}();\n    ~{{__CLASS_NAME__}}();\n\nprivate:\n\n};\n\n#endif",
                        "description": "Content of your created header file. \nAvailable commands are:\n{{__CLASS_NAME__}} - entered classname.\n{{__CLASS_NAME_UPPER__}} - entered classname in upper-case letters.\n{{__CLASS_NAME_LOWER__}} - entered classname in lower-case letters.\n{{__CLASS_NAME_LOWER__}} - entered classname in lower-case letters.\n{{__CLASS_NAME_CAPITALIZE__}} - default classname with capitalized first letter.\n{{__HEADER_FILE_NAME__}} - default headerfilename as entered in the settings. \n{{__SOURCE_FILE_NAME__}} - default sourcefilename as entered in the settings.\n{{__HEADER_FILE_NAME_LOWER__}} - headerfilename as lower case and capitalized will be lowered and hyphenated\n{{__SOURCE_FILE_NAME_LOWER__}} - sourcefilename as lower case and capitalized will be lowered and hyphenated"
                    },
                    "cpp.gepper.classImplementationTemplate": {
                        "type": "string",
                        "editPresentation": "multilineText",
                        "default": "#include \"{{__HEADER_FILE_NAME__}}\"\n\n{{__CLASS_NAME__}}::{{__CLASS_NAME__}}()\n{\n\n}\n\n{{__CLASS_NAME__}}::~{{__CLASS_NAME__}}()\n{\n\n}",
                        "description": "Content of your created source file. \nAvailable commands are:\n{{__CLASS_NAME__}} - entered classname.\n{{__CLASS_NAME_UPPER__}} - entered classname in upper-case letters.\n{{__CLASS_NAME_LOWER__}} - entered classname in lower-case letters.\n{{__CLASS_NAME_CAPITALIZE__}} - default classname with capitalized first letter.\n{{__HEADER_FILE_NAME__}} - default headerfilename as entered in the settings. \n{{__SOURCE_FILE_NAME__}} - default sourcefilename as entered in the settings.\n{{__HEADER_FILE_NAME_LOWER__}} - headerfilename as lower case and capitalized will be lowered and hyphenated\n{{__SOURCE_FILE_NAME_LOWER__}} - sourcefilename as lower case and capitalized will be lowered and hyphenated"
                    },
                    "cpp.gepper.classHeaderFileNameScheme": {
                        "type": "string",
                        "default": "{{__CLASS_NAME__}}.h",
                        "description": "Name of your header file. \nAvailable commands are:\n{{__CLASS_NAME__}} - entered classname.\n{{__CLASS_NAME_UPPER__}} - entered classname in upper-case letters.\n{{__CLASS_NAME_LOWER__}} - entered classname in lower-case letters."
                    },
                    "cpp.gepper.classImplementationFileNameScheme": {
                        "type": "string",
                        "default": "{{__CLASS_NAME__}}.cpp",
                        "description": "Name of your source file. \nAvailable commands are:\n{{__CLASS_NAME__}} - entered classname.\n{{__CLASS_NAME_UPPER__}} - entered classname in upper-case letters.\n{{__CLASS_NAME_LOWER__}} - entered classname in lower-case letters."
                    }
                }
            }
        ]
    },
    "scripts": {
        "vscode:prepublish": "npm run package",
        "compile": "webpack",
        "watch": "webpack --watch",
        "package": "webpack --mode production --devtool hidden-source-map",
        "compile-tests": "tsc -p . --outDir out",
        "watch-tests": "tsc -p . -w --outDir out",
        "pretest": "npm run compile-tests && npm run compile && npm run lint",
        "lint": "eslint src --ext ts",
        "test": "node ./out/test/runTest.js"
    },
    "devDependencies": {
        "@types/vscode": "^1.66.0",
        "@types/glob": "^7.2.0",
        "@types/mocha": "^9.1.1",
        "@types/node": "14.x",
        "@typescript-eslint/eslint-plugin": "^5.21.0",
        "@typescript-eslint/parser": "^5.21.0",
        "eslint": "^8.14.0",
        "glob": "^8.0.1",
        "mocha": "^9.2.2",
        "typescript": "^4.6.4",
        "ts-loader": "^9.2.8",
        "webpack": "^5.70.0",
        "webpack-cli": "^4.9.2",
        "@vscode/test-electron": "^2.1.3"
    }
}
